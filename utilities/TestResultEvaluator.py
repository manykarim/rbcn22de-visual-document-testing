# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'pyqt5-sample.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from TableModel import TableModel
from TestResultParser import TestResultParser
from robot.api import ExecutionResult
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QCheckBox, QTableWidgetItem, QWidget, QFileDialog, QSplitter, QMessageBox, QMainWindow
from PyQt5.QtCore import QModelIndex, Qt
import os
import shutil


class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):


        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1000)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setContentsMargins(10, 10, 10, 10)
        # self.btn_close = QtWidgets.QPushButton(self.centralwidget)
        # self.btn_close.setFixedWidth(93)
        # #self.btn_close.setGeometry(QtCore.QRect(10, 920, 93, 28))
        # self.btn_close.setObjectName("btn_close")
        

        self.mainLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.mainLayout.setContentsMargins(0, 0, 0, 0)
        self.mainLayout.setObjectName("mainLayout")
        self.leftLayout = QtWidgets.QVBoxLayout()
        self.leftLayout.setObjectName("leftLayout")
        
        self.lbl_testResults = QtWidgets.QLabel(self.centralwidget)
        self.lbl_testResults.setObjectName("lbl_testResults")
        self.leftLayout.addWidget(self.lbl_testResults)
        self.tbl_testResults = QtWidgets.QTableView()
        self.tbl_testResults.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.tbl_testResults.setAlternatingRowColors(True)
        self.tbl_testResults.setObjectName("tbl_testResults")

        header = self.tbl_testResults.horizontalHeader()       
        self.leftLayout.addWidget(self.tbl_testResults)
        
        self.lbl_referenceDataFolder = QtWidgets.QLabel(self.centralwidget)
        self.lbl_referenceDataFolder.setObjectName("lbl_referenceDataFolder")
        self.leftLayout.addWidget(self.lbl_referenceDataFolder)
        self.referenceDataLayout = QtWidgets.QHBoxLayout()
        self.referenceDataLayout.setObjectName("referenceDataLayout")
        self.edit_referenceDataFolder = QtWidgets.QLineEdit(self.centralwidget)
        self.edit_referenceDataFolder.setObjectName("edit_referenceDataFolder")
        self.referenceDataLayout.addWidget(self.edit_referenceDataFolder)
        self.btn_browseOutputFolder = QtWidgets.QPushButton(self.centralwidget)
        self.btn_browseOutputFolder.setObjectName("btn_browseOutputFolder")
        self.btn_browseOutputFolder.pressed.connect(self.get_reference_data_folder)
        self.referenceDataLayout.addWidget(self.btn_browseOutputFolder)
        self.btn_generateRefDataSet = QtWidgets.QPushButton(self.centralwidget)
        self.btn_generateRefDataSet.setObjectName("btn_generateRefDataSet")
        self.btn_generateRefDataSet.pressed.connect(self.generate_reference_data)
        self.referenceDataLayout.addWidget(self.btn_generateRefDataSet)
        self.leftLayout.addLayout(self.referenceDataLayout)


        self.lbl_bugDataFolder = QtWidgets.QLabel(self.centralwidget)
        self.lbl_bugDataFolder.setObjectName("lbl_bugDataFolder")
        self.leftLayout.addWidget(self.lbl_bugDataFolder)
        self.bugDataLayout = QtWidgets.QHBoxLayout()
        self.bugDataLayout.setObjectName("bugDataLayout")
        self.edit_bugDataFolder = QtWidgets.QLineEdit(self.centralwidget)
        self.edit_bugDataFolder.setObjectName("edit_bugDataFolder")
        self.bugDataLayout.addWidget(self.edit_bugDataFolder)
        self.btn_browseBugDataFolder = QtWidgets.QPushButton(self.centralwidget)
        self.btn_browseBugDataFolder.setObjectName("btn_browseBugDataFolder")
        self.btn_browseBugDataFolder.pressed.connect(self.get_bug_data_folder)
        self.bugDataLayout.addWidget(self.btn_browseBugDataFolder)
        self.btn_generateBugDataSet = QtWidgets.QPushButton(self.centralwidget)
        self.btn_generateBugDataSet.setObjectName("btn_generateBugDataSet")
        self.btn_generateBugDataSet.pressed.connect(self.generate_bug_data)
        self.bugDataLayout.addWidget(self.btn_generateBugDataSet)
        self.leftLayout.addLayout(self.bugDataLayout)
        

        
        
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.leftLayout.addWidget(self.line_2)
        #self.leftLayout.addWidget(self.btn_close)
        #self.mainLayout.addLayout(self.leftLayout)
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setMinimumSize(QtCore.QSize(500, 0))
        self.graphicsView.setObjectName("graphicsView")
        self.graphicsView.setResizeAnchor(QtWidgets.QGraphicsView.AnchorUnderMouse)
        #self.mainLayout.addWidget(self.graphicsView)
        MainWindow.setCentralWidget(self.centralwidget)


        self.leftWidget = QWidget()
        self.leftWidget.setLayout(self.leftLayout)
        
        self.splitter = QSplitter(Qt.Horizontal)
        self.splitter.addWidget(self.leftWidget)
        self.splitter.addWidget(self.graphicsView)
        self.mainLayout.addWidget(self.splitter)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1920, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionOpen.triggered.connect(self.select_output_file)
        self.menuFile.addAction(self.actionOpen)
        self.menubar.addAction(self.menuFile.menuAction())
        self.scene = QtWidgets.QGraphicsScene()
        data = [["", "", "", "", "", 0 , ""]]
        self.model = TableModel(data)
        self.tbl_testResults.setModel(self.model)
        delegate = CheckBoxDelegate(None)
        self.tbl_testResults.setItemDelegateForColumn(5, delegate)
        headerview = EditableHeaderView(self.tbl_testResults)
        self.tbl_testResults.setHorizontalHeader(headerview)
        headerview.setEditable(1, True)
        headerview.setEditable(2, True)
        self._proxy = QtCore.QSortFilterProxyModel(MainWindow)
        self._proxy.setSourceModel(self.model)
        self.tbl_testResults.setModel(self._proxy)
        self.tbl_testResults.setSortingEnabled(True)
        headerview.textChanged.connect(self.on_text_changed)
        headerview.setStretchLastSection(True)
        self.tbl_testResults.setMinimumWidth(800)
        self.tbl_testResults.setColumnWidth(1, 600)
        self.tbl_testResults.setColumnWidth(2, 200)
        # self.tbl_testResults.setColumnWidth(3, 100)
        # self.tbl_testResults.setColumnWidth(4, 100)
        self.tbl_testResults.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.tbl_testResults.customContextMenuRequested.connect(self.on_context_menu)
        self.tbl_testResults.selectionModel().selectionChanged.connect(self.selection_changed)
        self.tbl_testResults.doubleClicked.connect(self.double_clicked)
        self.tbl_testResults.setColumnHidden(6, True)
        self.tbl_testResults.setColumnHidden(3, True)
        self.tbl_testResults.setColumnHidden(4, True)
        
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        QtWidgets.QShortcut(QtCore.Qt.Key_Delete, self.tbl_testResults, activated=self.delete_rows)
        QtWidgets.QShortcut(QtCore.Qt.Key_Plus, self.graphicsView, activated=self.zoom_in)
        QtWidgets.QShortcut(QtCore.Qt.Key_Minus, self.graphicsView, activated=self.zoom_out)
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Output Test Result Evaluator"))
        #self.btn_close.setText(_translate("MainWindow", "Close"))
        self.lbl_referenceDataFolder.setText(_translate("MainWindow", "Reference Data Folder"))
        self.lbl_bugDataFolder.setText(_translate("MainWindow", "Bug Data Folder"))
        self.lbl_testResults.setText(_translate("MainWindow", "Test Results"))
        self.tbl_testResults.setSortingEnabled(True)

       
        self.btn_browseOutputFolder.setText(_translate("MainWindow", "Browse"))
        self.btn_generateRefDataSet.setText(_translate("MainWindow", "Generate"))
        self.btn_browseBugDataFolder.setText(_translate("MainWindow", "Browse"))
        self.btn_generateBugDataSet.setText(_translate("MainWindow", "Generate"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
    
    def on_context_menu(self, pos):

        if self.tbl_testResults.selectionModel().selection().indexes():
            rows = sorted(set(self._proxy.mapToSource(index).row() for index in
                      self.tbl_testResults.selectedIndexes()))
            menu = QtWidgets.QMenu()
            acceptAction = menu.addAction("Accept Changes")
            declineAction = menu.addAction("Decline Changes")
            deleteAction = menu.addAction("Delete Rows")
            
            action = menu.exec_(self.tbl_testResults.viewport().parentWidget().mapToGlobal(pos))
            if action == acceptAction:
                for row in rows:            
                    self.model.acceptChanges(row)
            if action == declineAction:
                for row in rows:            
                    self.model.declineChanges(row)
            if action == deleteAction:
                self.delete_rows()
    
    def selection_changed(self):
        rows = sorted(set(self._proxy.mapToSource(index).row() for index in
                      self.tbl_testResults.selectedIndexes()))
        if len(rows)==1:
            self.show_screenshots(self.tbl_testResults.model().sourceModel().data(self.tbl_testResults.model().sourceModel().index(rows[0], 6), 0))
            
            pass

    def double_clicked(self):
        rows = sorted(set(self._proxy.mapToSource(index).row() for index in
                      self.tbl_testResults.selectedIndexes()))
        if len(rows)==1:
            self.open_folder(self.tbl_testResults.model().sourceModel().data(self.tbl_testResults.model().sourceModel().index(rows[0], 3), 0))
            
            pass
    
    def delete_rows(self):
        rows = sorted(set(self._proxy.mapToSource(index).row() for index in
                self.tbl_testResults.selectedIndexes()), reverse=True)              

        for row in rows:
            self.tbl_testResults.model().sourceModel().removeRows(row, 1, QModelIndex())


    def on_text_changed(self, col, text):
        self._proxy.setFilterKeyColumn(col)
        self._proxy.setFilterWildcard("*{}*".format(text) if text else "")

    def addImage(self, image_path):
        pix = QPixmap(image_path)
        item = QtWidgets.QGraphicsPixmapItem(pix)
        self.scene.addItem(item)
        rect = self.scene.itemsBoundingRect() 
        item.moveBy(0, rect.height())
        
    def show_screenshots(self, screenshots):
        self.scene = QtWidgets.QGraphicsScene()
        for image in screenshots:
            self.addImage(image)
        self.graphicsView.setScene(self.scene)
        view_width = self.graphicsView.frameRect().width()
        scene_width = self.scene.itemsBoundingRect().width()
        rr = self.graphicsView.mapToScene(ui.graphicsView.frameRect())
        self.graphicsView.fitInView(0,0,scene_width,300, Qt.KeepAspectRatio)

    def open_folder(self, reference_file_path):
        if reference_file_path:
            os.startfile(os.path.dirname(os.path.realpath(reference_file_path)))
        
    def load_test_results(self, test_results):
        data=[]
        for item in test_results:
            data.append([item["suite"], item["testcase"], item["error"], item["reference"], item["candidate"], 0, item['screenshots']])
        if len(data) != 0:
            self.model.reload_data(data)
        else:
            data = [["", "", "", "", "", 0 , ""]]
            self.model.reload_data(data)
        
    def generate_reference_data(self):
        reference_data_path = self.edit_referenceDataFolder.text()
        reference_data_path = os.path.abspath(reference_data_path)
        message = ''
        if not os.path.exists(reference_data_path):
            os.makedirs(reference_data_path)
        if self.tbl_testResults.model() is not None:
            for i in range(self.tbl_testResults.model().rowCount()):
                if self.tbl_testResults.model().data(self.tbl_testResults.model().index(i, 5)):
                    try:
                        candidate_file = self.tbl_testResults.model().data(self.tbl_testResults.model().index(i, 4))
                        new_filename = str(os.path.basename(candidate_file)).split("candidate_")[1]
                        dst_file = os.path.join(reference_data_path,new_filename)
                        shutil.copyfile(candidate_file, dst_file)
                        
                    except:
                        message = message + "{} \n".format(candidate_file)

            if message:
                warn_message = "Missing file or filenames does not contain \'candidate_\': \n" + message
                QMessageBox.warning(self, "Warning" , warn_message)
            else:
                QMessageBox.information(self, "Information", "Reference File Generation is finished")
        
    
    def generate_bug_data(self):
        bug_data_path = self.edit_bugDataFolder.text()
        bug_data_path = os.path.abspath(bug_data_path)
        message = ''
        if not os.path.exists(bug_data_path):
            os.makedirs(bug_data_path)
        if self.tbl_testResults.model() is not None:
            for i in range(self.tbl_testResults.model().rowCount()):
                if self.tbl_testResults.model().data(self.tbl_testResults.model().index(i, 5)):
                    try:
                        refernce_file = self.tbl_testResults.model().data(self.tbl_testResults.model().index(i, 3))
                        case_name = self.tbl_testResults.model().data(self.tbl_testResults.model().index(i, 1))
                        test_file_path= os.path.dirname(refernce_file)
                        destination = os.path.join(bug_data_path, case_name)
                        shutil.copytree(test_file_path, destination)
                        
                    except Exception as e:
                        message = message + "{} \n".format(e)

            if message:
                warn_message = "Errors about generating bug data: \n" + message
                QMessageBox.warning(self, "Warning" , warn_message)
            else:
                QMessageBox.information(self, "Information", "Bug File Generation is Finished")  
    
    def get_reference_data_folder(self):
        dialog = QFileDialog()
        reference_data_folder = dialog.getExistingDirectory(MainWindow, 'Select a folder to store new reference data')
        self.edit_referenceDataFolder.setText(reference_data_folder)
        return reference_data_folder

    def get_bug_data_folder(self):
        dialog = QFileDialog()
        bug_data_folder = dialog.getExistingDirectory(MainWindow, 'Select a folder to store new bug data')
        self.edit_bugDataFolder.setText(bug_data_folder)
        return bug_data_folder

    def select_output_file(self):
        dialog = QFileDialog()
        output_file = dialog.getOpenFileName(MainWindow, caption='Select an output.xml file')
        try:
            visitor = TestResultParser(output_file[0])
            result = ExecutionResult(output_file[0])
            result.visit(visitor)
            ui.load_test_results(visitor.testresults)
            self.edit_referenceDataFolder.setText(os.path.join(os.path.dirname(os.path.realpath(output_file[0])), "reference_data"))
            self.edit_bugDataFolder.setText(os.path.join(os.path.dirname(os.path.realpath(output_file[0])), "bug_data"))
        except:
            pass
    
    def wheelEvent(self, event):
        self.zoom += event.angleDelta().y()/2880
        self.graphicsView.scale(self.zoom, self.zoom)
    
    def zoom_in(self):
        self.graphicsView.scale(1.1, 1.1)

    def zoom_out(self):
        self.graphicsView.scale(0.9, 0.9)



class CheckBoxDelegate(QtWidgets.QItemDelegate):
    """
    A delegate that places a fully functioning QCheckBox cell of the column to which it's applied.
    """
    def __init__(self, parent):
        QtWidgets.QItemDelegate.__init__(self, parent)

    def createEditor(self, parent, option, index):
        """
        Important, otherwise an editor is created if the user clicks in this cell.
        """
        return None

    def paint(self, painter, option, index):
        """
        Paint a checkbox without the label.
        """
        self.drawCheck(painter, option, option.rect, QtCore.Qt.Unchecked if int(index.data()) == 0 else QtCore.Qt.Checked)

    def editorEvent(self, event, model, option, index):
        '''
        Change the data in the model and the state of the checkbox
        if the user presses the left mousebutton and this cell is editable. Otherwise do nothing.
        '''
        if not int(index.flags() & QtCore.Qt.ItemIsEditable) > 0:
            return False

        if event.type() == QtCore.QEvent.MouseButtonRelease and event.button() == QtCore.Qt.LeftButton:
            # Change the checkbox-state
            self.setModelData(None, model, index)
            return True

        return False


    def setModelData (self, editor, model, index):
        '''
        The user wanted to change the old state in the opposite.
        '''
        model.setData(index, 1 if int(index.data()) == 0 else 0, QtCore.Qt.EditRole)

class EditableHeaderView(QtWidgets.QHeaderView):
    textChanged = QtCore.pyqtSignal(int, str)

    def __init__(self, parent=None):
        super(EditableHeaderView, self).__init__(QtCore.Qt.Horizontal, parent)
        self._is_editable = dict()
        self.setSectionsClickable(True)
        self._lineedit = QtWidgets.QLineEdit(self, visible=False)
        self._lineedit.editingFinished.connect(self._lineedit.hide)
        self._lineedit.textChanged.connect(self.on_text_changed)
        self.sectionDoubleClicked.connect(self.on_sectionDoubleClicked)
        self._current_index = -1
        self._filters_text = dict()

    def setEditable(self, index, is_editable):
        if 0 <= index < self.count():
            self._is_editable[index] = is_editable

    @QtCore.pyqtSlot()
    def hide_lineedit(self):
        self._filters_text[self._current_index] = self._lineedit.text()
        self._lineedit.hide()
        self._current_index = -1
        self._lineedit.clear()

    @QtCore.pyqtSlot(int)
    def on_sectionDoubleClicked(self, index):
        self.hide_lineedit()
        is_editable = False
        if index in self._is_editable:
            is_editable = self._is_editable[index]
        if is_editable:
            geom = QtCore.QRect(self.sectionViewportPosition(index), 0, self.sectionSize(index), self.height())
            self._lineedit.setGeometry(geom)
            if index in self._filters_text:
                self._lineedit.setText(self._filters_text[index])
            self._lineedit.show()
            self._lineedit.setFocus()
            self._current_index = index
            self.textChanged.emit(self._current_index, self._lineedit.text())

    @QtCore.pyqtSlot(str)
    def on_text_changed(self, text):
        if self._current_index != -1:
            # self.model().setHeaderData(self._current_index, self.orientation(), text)
            self.textChanged.emit(self._current_index, text)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
    

